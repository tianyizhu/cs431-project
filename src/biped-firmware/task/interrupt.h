/**
 *  @file   interrupt.h
 *  @author Simon Yu
 *  @date   12/03/2022
 *  @brief  Interrupt function header.
 *
 *  This file defines the interrupt functions.
 */

/*
 *  Include guard.
 */
#ifndef TASK_INTERRUPT_H_
#define TASK_INTERRUPT_H_

/*
 *  External headers.
 */
#include <cstdint>
#include <esp_attr.h>

/*
 *  Biped namespace.
 */
namespace biped
{
/*
 *  Firmware namespace.
 */
namespace firmware
{
/**
 *  @param  pin ESP32 pin.
 *  @param  handler Interrupt handler function pointer.
 *  @param  mode Interrupt mode.
 *  @brief  Attach an interrupt handler to the given ESP32 pin.
 *
 *  This function attaches the given interrupt handler to
 *  the given ESP32 pin with the given interrupt mode.
 *
 *  Note that unlike its corresponding counterpart in the
 *  Arduino BSP, this function does not install the GPIO
 *  interrupt service. Therefore, this function, instead of
 *  the Arduino BSP version, should be used if the ESP-IDF
 *  camera framework was initialized anywhere in the firmware,
 *  as the ESP-IDF camera framework installs the GPIO interrupt
 *  service. Therefore, using the Arduino attachInterrupt would
 *  cause exceptions, as the GPIO interrupt service cannot be
 *  installed twice.
 */
void
attachInterrupt(const uint8_t& pin, void
(*handler)(void), const int& mode);

/**
 *  @param  pin ESP32 pin.
 *  @brief  Perform a digital read from the given ESP32 pin.
 *
 *  This function performs a digital read from the given ESP32
 *  pin and returns the state of the ESP32 pin read.
 *
 *  Unlike its corresponding counterpart in the Arduino BSP,
 *  this function is safe to be called from an interrupt context.
 */
int IRAM_ATTR
digitalReadFromISR(uint8_t pin);

/**
 *  @brief  Left encoder A interrupt handler.
 *
 *  This function handles left encoder A interrupts and calls the
 *  corresponding encoder callback function.
 */
void IRAM_ATTR
encoderLeftAInterruptHandler();

/**
 *  @brief  Left encoder B interrupt handler.
 *
 *  This function handles left encoder B interrupts and calls the
 *  corresponding encoder callback function.
 */
void IRAM_ATTR
encoderLeftBInterruptHandler();

/**
 *  @brief  Right encoder A interrupt handler.
 *
 *  This function handles right encoder A interrupts and calls the
 *  corresponding encoder callback function.
 */
void IRAM_ATTR
encoderRightAInterruptHandler();

/**
 *  @brief  Right encoder B interrupt handler.
 *
 *  This function handles right encoder B interrupts and calls the
 *  corresponding encoder callback function.
 */
void IRAM_ATTR
encoderRightBInterruptHandler();

/**
 *  @brief  I/O expander A interrupt handler.
 *
 *  This function handles interrupts to the ESP32 generated by the
 *  I/O expander A and wakes the I/O expander A interrupt task.
 */
void IRAM_ATTR
ioExpanderAInterruptHandler();

/**
 *  @brief  I/O expander B interrupt handler.
 *
 *  This function handles interrupts to the ESP32 generated by the
 *  I/O expander B and wakes the I/O expander B interrupt task.
 */
void IRAM_ATTR
ioExpanderBInterruptHandler();

/**
 *  @param  arg Function argument pointer.
 *  @brief  Push button A interrupt handler.
 *
 *  This function handles push button A interrupts and starts the
 *  planner.
 */
void IRAM_ATTR
pushButtonAInterruptHandler(void* arg);

/**
 *  @param  arg Function argument pointer.
 *  @brief  Push button B interrupt handler.
 *
 *  This function handles push button B interrupts.
 */
void IRAM_ATTR
pushButtonBInterruptHandler(void* arg);

/**
 *  @param  arg Function argument pointer.
 *  @brief  Push button C interrupt handler.
 *
 *  This function handles push button C interrupts.
 */
void IRAM_ATTR
pushButtonCInterruptHandler(void* arg);

/**
 *  @param  arg Function argument pointer.
 *  @brief  Timer interrupt handler.
 *
 *  This function handles timer interrupts and wakes the real-time
 *  task.
 */
void IRAM_ATTR
timerInterruptHandler(void* arg);
}   // namespace firmware
}   // namespace biped

#endif  // TASK_INTERRUPT_H_
